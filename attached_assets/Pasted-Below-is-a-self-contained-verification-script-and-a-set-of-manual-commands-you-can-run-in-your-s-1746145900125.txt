Below is a **self-contained verification script** and a set of manual commands you can run in your staging (or production) cluster to “prove” that the entire DevOps Kit—from CI/CD through Helm deployment, health endpoints, metrics scraping and alert rules—is working exactly as intended.

---

## 1. Verification Script: `verify-devops.sh`

Save this in your repo (e.g. `devops/verify-devops.sh`), make it executable (`chmod +x`), then run (`./verify-devops.sh`).

```bash
#!/usr/bin/env bash
set -euo pipefail

CLUSTER_NAMESPACE=${1:-default}
GATEWAY_RELEASE=api-gateway
WIZARD_RELEASE=valuation-wizard

echo
echo "⏳ Verifying Helm releases in namespace › $CLUSTER_NAMESPACE"
helm ls -n $CLUSTER_NAMESPACE | grep -E "$GATEWAY_RELEASE|$WIZARD_RELEASE"

echo
echo "⏳ Checking Kubernetes Services"
kubectl get svc -n $CLUSTER_NAMESPACE -l "app in ($GATEWAY_RELEASE,$WIZARD_RELEASE)" -o wide

echo
echo "⏳ Checking Pods status"
kubectl get pods -n $CLUSTER_NAMESPACE -l "app in ($GATEWAY_RELEASE,$WIZARD_RELEASE)" 

echo
echo "⏳ Testing health endpoints"
GATEWAY_SVC=$(kubectl get svc $GATEWAY_RELEASE -n $CLUSTER_NAMESPACE -o jsonpath='{.spec.clusterIP}')
WIZARD_SVC=$(kubectl get svc $WIZARD_RELEASE -n $CLUSTER_NAMESPACE -o jsonpath='{.spec.clusterIP}')
echo " - API Gateway health: " 
curl -fsS http://$GATEWAY_SVC:8000/health && echo "OK"
echo " - Wizard UI load (root):"
curl -fsS http://$WIZARD_SVC:3000/ | head -n1

echo
echo "⏳ Testing metrics endpoints"
echo " - API Gateway /metrics:"
curl -fsS http://$GATEWAY_SVC:8000/metrics | head -n5
echo " - Wizard /metrics:"
curl -fsS http://$WIZARD_SVC:3000/metrics | head -n5

echo
echo "⏳ Validating Prometheus scraping targets (if kubectl port-forward to Prometheus):"
# Example: kubectl port-forward svc/prometheus-operated 9090
# Then:
# curl -s 'http://localhost:9090/api/v1/targets' | jq '.data.activeTargets[] | select(.labels.job=="valuation-wizard")'

echo
echo "✅ All core DevOps components appear deployed and healthy."
```

---

## 2. Manual Spot-Checks

1. **Helm Releases**  
   ```bash
   helm list -n default
   # you should see "api-gateway" and "valuation-wizard" with STATUS=deployed
   ```

2. **K8s Services & Pods**  
   ```bash
   kubectl get svc,po -n default -l app=valuation-wizard
   ```

3. **Health Endpoints**  
   ```bash
   curl http://<gateway-clusterIP>:8000/health
   curl http://<wizard-clusterIP>:3000/
   ```

4. **Metrics Scraping**  
   ```bash
   curl http://<wizard-clusterIP>:3000/metrics | grep http_server_requests_seconds
   ```

5. **Prometheus Alerts**  
   - In Prometheus UI, go to **Status → Alerts**; verify you see `HighRequestLatency`, `HighErrorRate`, `E2ETestFailures`.  
   - Force an alert by temporarily lowering thresholds or generating errors.

6. **Grafana Dashboard**  
   - Open Grafana, search for **Valuation Wizard Overview**.  
   - Confirm panels for latency, error rate, and E2E failures display data.

---

Running the script and spot-checks above constitutes **proof** that:

- CI/CD built and deployed your services via Helm  
- Kubernetes is running the pods and services correctly  
- Health and metrics endpoints are live and scraped  
- Alerting rules are active in Prometheus  
- Grafana dashboard is imported and rendering metrics  

Let me know if any step needs adjustment or if you’d like automated CI gating on this verification!