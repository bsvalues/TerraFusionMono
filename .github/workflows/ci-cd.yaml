name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm test -- --coverage
        
      - name: Check coverage thresholds
        run: npx nyc check-coverage --lines 80 --functions 80 --branches 80

      - name: Upload coverage reports
        if: success()
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./coverage/lcov.info

  e2e:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          cd packages/ui
          npm ci
          
      - name: Build UI for testing
        run: |
          cd packages/ui
          npm run build
          npm install -g serve
          serve -s build -l 5000 &
          
      - name: Run Cypress tests
        run: |
          cd packages/ui
          npx cypress run --config baseUrl=http://localhost:5000
          
      - name: Upload E2E coverage
        if: success()
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: packages/ui/coverage/lcov.info

  build:
    runs-on: ubuntu-latest
    needs: [test, e2e]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        service: [api-gateway, valuation-wizard]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Build UI (if wizard)
        if: matrix.service == 'valuation-wizard'
        run: |
          cd packages/ui
          npm ci
          npm run build

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_REPO }}/${{ matrix.service }}:latest ./${{ matrix.service }}

      - name: Push to Registry
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKER_REPO }}/${{ matrix.service }}:latest

  preview:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [test, e2e]
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup kubectl & helm
        uses: azure/setup-kubectl@v3
        
      - name: Set up Helm
        uses: azure/setup-helm@v3
        
      - name: Build preview Docker images
        run: |
          docker build -t ${{ secrets.DOCKER_REPO }}/valuation-wizard:pr-${{ github.event.pull_request.number }} ./valuation-wizard
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKER_REPO }}/valuation-wizard:pr-${{ github.event.pull_request.number }}
          
      - name: Deploy preview environment
        run: |
          helm upgrade --install preview-${{ github.event.pull_request.number }} \
            devops/helm/valuation-wizard \
            --set image.repository=${{ secrets.DOCKER_REPO }}/valuation-wizard \
            --set image.tag=pr-${{ github.event.pull_request.number }} \
            --set ingress.hosts[0].host=preview-${{ github.event.pull_request.number }}.terrafusion.local
            
      - name: Comment PR with preview URL
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Preview environment deployed at: https://preview-${context.issue.number}.terrafusion.local`
            })

  cleanup_preview:
    if: github.event.action == 'closed' && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Helm
        uses: azure/setup-helm@v3
        
      - name: Remove preview environment
        run: |
          helm uninstall preview-${{ github.event.pull_request.number }}

  deploy:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Terraform Init & Apply
        run: |
          cd devops/terraform
          terraform init
          terraform apply -auto-approve \
            -var="kubeconfig=${{ secrets.KUBECONFIG_PATH }}" \
            -var="api_gateway_image=${{ secrets.DOCKER_REPO }}/api-gateway" \
            -var="wizard_image=${{ secrets.DOCKER_REPO }}/valuation-wizard" \
            -var="environment=production"