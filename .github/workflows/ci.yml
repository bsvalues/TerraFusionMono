name: TerraFusion CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint_and_test:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: 'poetry'

      - name: Cache Nx
        uses: actions/cache@v3
        with:
          path: .nx/cache
          key: ${{ runner.os }}-nx-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Install npm dependencies
        run: npm ci

      - name: Install Python dependencies
        run: |
          pip install poetry
          poetry install

      - name: Lint and Test JavaScript
        run: npx nx affected --target=lint,test --parallel=3

      - name: Test Python
        run: poetry run pytest

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: lint_and_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Cache Nx
        uses: actions/cache@v3
        with:
          path: .nx/cache
          key: ${{ runner.os }}-nx-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npx nx affected --target=build --parallel=3

  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.8.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          terraform plan -out=tfplan -var-file=staging.tfvars
        continue-on-error: true

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: terraform/tfplan

      - name: Helm Deploy to Staging
        run: |
          helm upgrade --install terrafusion-staging ./helm \
            --namespace terrafusion-staging \
            --create-namespace \
            --set environment=staging \
            --set image.tag=${GITHUB_SHA::8} \
            --wait