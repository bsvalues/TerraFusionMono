name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache Helm cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/helm
          key: ${{ runner.os }}-helm-${{ hashFiles('infra/helm/**/*.yaml') }}
          restore-keys: |
            ${{ runner.os }}-helm-

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: npm ci

      - name: Run lint & type-check
        run: |
          npm run lint
          npm run type-check

      - name: Run unit tests
        run: npm test

      - name: Security audit
        run: npm audit --audit-level=moderate

      - name: Setup Helm
        uses: azure/setup-helm@v3

      - name: Helm lint all charts
        working-directory: infra/helm
        run: |
          for d in *; do
            if [ -f "$d/Chart.yaml" ]; then
              echo "â†’ Linting chart: $d"
              helm lint "$d" --strict
            fi
          done

  validate-migrations:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgis/postgis:14-3.3  # Using official PostGIS image
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      
      - name: Verify PostGIS is available
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          PGPASSWORD=postgres psql -h localhost -U postgres -d testdb -c "SELECT postgis_version();"
          echo "PostGIS extension verified."
      
      - name: Download Flyway
        run: |
          wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/9.4.0/flyway-commandline-9.4.0-linux-x64.tar.gz | tar xvz
          sudo ln -s $(pwd)/flyway-9.4.0/flyway /usr/local/bin/flyway
      
      - name: Validate Flyway migrations
        run: |
          cd db-migrations
          flyway validate -url=jdbc:postgresql://localhost:5432/testdb -user=postgres -password=postgres -locations=filesystem:migrations
      
      - name: Run Flyway migrations
        run: |
          cd db-migrations
          flyway clean -url=jdbc:postgresql://localhost:5432/testdb -user=postgres -password=postgres
          flyway migrate -url=jdbc:postgresql://localhost:5432/testdb -user=postgres -password=postgres -locations=filesystem:migrations
          
      - name: Load sample data for testing
        run: |
          cd db-migrations
          PGPASSWORD=postgres psql -h localhost -U postgres -d testdb -f "scripts/load_sample_geometries.sql"
          
      - name: Verify spatial queries
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d testdb -c "SELECT * FROM gis.find_parcels_near_point(40.7800, -73.9700, 5000);"
          PGPASSWORD=postgres psql -h localhost -U postgres -d testdb -c "SELECT gis.calculate_parcel_area('NYC-CP-001', 'acres');"
          echo "Spatial queries verified successfully."
          
  rollback-test:
    runs-on: ubuntu-latest
    needs: validate-migrations
    services:
      postgres:
        image: postgis/postgis:14-3.3
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        
      - name: Download Flyway
        run: |
          wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/9.4.0/flyway-commandline-9.4.0-linux-x64.tar.gz | tar xvz
          sudo ln -s $(pwd)/flyway-9.4.0/flyway /usr/local/bin/flyway
      
      - name: Test migration to specific version
        run: |
          cd db-migrations
          # Migrate to the latest version
          flyway migrate -url=jdbc:postgresql://localhost:5432/testdb -user=postgres -password=postgres -locations=filesystem:migrations
          
          # Validate current state
          flyway info -url=jdbc:postgresql://localhost:5432/testdb -user=postgres -password=postgres
          
          # Clean and migrate only to version 5 (without GeoJSON helpers)
          flyway clean -url=jdbc:postgresql://localhost:5432/testdb -user=postgres -password=postgres
          flyway migrate -url=jdbc:postgresql://localhost:5432/testdb -user=postgres -password=postgres -target=5
          
          # Verify it has only applied up to V5
          flyway info -url=jdbc:postgresql://localhost:5432/testdb -user=postgres -password=postgres
          
          echo "Incremental migration testing successful."