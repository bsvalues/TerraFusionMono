Below is a set of detailed code examples and further guidance to help you implement enhanced reporting capabilities using both backend and frontend components.

---

## **1. Backend â€“ Report Generation with Flask and WeasyPrint**

We'll create a new API endpoint (e.g., `/api/reports/quality`) that generates a PDF report using an HTML template rendered with Flask and converted to PDF with WeasyPrint.

### **a. Install Required Packages**

Ensure you have Flask, WeasyPrint, and Jinja2 installed (Jinja2 is built into Flask):

```bash
pip install Flask WeasyPrint
```

### **b. Create an HTML Template for the Report**

Create a folder called `templates` in your project directory and add a file named `quality_report.html`. For example:

```html
<!-- templates/quality_report.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Data Quality Report</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    h1 { text-align: center; }
    table { width: 100%; border-collapse: collapse; margin: 20px 0; }
    th, td { border: 1px solid #cccccc; padding: 8px; text-align: left; }
    th { background-color: #f2f2f2; }
    .summary { margin: 20px 0; }
  </style>
</head>
<body>
  <h1>Data Quality Report</h1>
  <p>Date: {{ report_date }}</p>
  <div class="summary">
    <h2>Summary Metrics</h2>
    <p>Total Issues: {{ summary.total_issues }}</p>
    <p>Average Quality Score: {{ summary.avg_quality_score }}</p>
  </div>
  <div class="details">
    <h2>Issue Details</h2>
    <table>
      <thead>
        <tr>
          <th>ID</th>
          <th>Description</th>
          <th>Severity</th>
          <th>Date Identified</th>
        </tr>
      </thead>
      <tbody>
        {% for issue in issues %}
        <tr>
          <td>{{ issue.id }}</td>
          <td>{{ issue.description }}</td>
          <td>{{ issue.severity }}</td>
          <td>{{ issue.date_identified }}</td>
        </tr>
        {% endfor %}
      </tbody>
    </table>
  </div>
</body>
</html>
```

### **c. Create the Flask Endpoint for Report Generation**

Create a new file (or update your existing Flask app) to add an endpoint that:
1. Fetches the necessary data (you can simulate or pull from your stored metrics).
2. Renders the HTML template with the data.
3. Converts the rendered HTML to a PDF using WeasyPrint.
4. Returns the PDF as a response.

```python
# report_api.py
from flask import Flask, render_template, make_response
from weasyprint import HTML
from datetime import datetime

app = Flask(__name__)

# Dummy data for the report. Replace with your actual logic.
def get_quality_report_data():
    summary = {
        'total_issues': 25,
        'avg_quality_score': 89.5
    }
    issues = [
        {'id': 1, 'description': 'Missing owner information', 'severity': 'High', 'date_identified': '2025-04-01'},
        {'id': 2, 'description': 'Incorrect parcel geometry', 'severity': 'Medium', 'date_identified': '2025-04-03'},
        # Add more issues...
    ]
    return summary, issues

@app.route('/api/reports/quality')
def generate_quality_report():
    # Retrieve report data (from a database or ETL process)
    summary, issues = get_quality_report_data()
    report_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # Render the HTML report template with the data
    html_content = render_template('quality_report.html', report_date=report_date, summary=summary, issues=issues)
    
    # Convert HTML content to PDF using WeasyPrint
    pdf = HTML(string=html_content).write_pdf()
    
    # Create a response with the PDF data
    response = make_response(pdf)
    response.headers['Content-Type'] = 'application/pdf'
    response.headers['Content-Disposition'] = 'attachment; filename=quality_report.pdf'
    return response

if __name__ == '__main__':
    app.run(port=5000, debug=True)
```

### **d. Validate the Report Generation**

1. **Run the Flask Application:**

   From your terminal in VS Code:
   ```bash
   python report_api.py
   ```

2. **Access the Endpoint:**

   Open your browser and navigate to:
   ```
   http://localhost:5000/api/reports/quality
   ```
   This should trigger the generation of a PDF file which you can download and review in a PDF viewer.

---

## **2. Frontend Integration**

### **a. Adding a "Generate Report" Button to the Dashboard**

In your React-based UI, add a new component or update an existing one to trigger the report generation and download.

Example component for report generation:

```tsx
// src/components/ReportGenerator.tsx
import React from 'react';
import { Button } from '@mui/material';
import axios from 'axios';

const ReportGenerator: React.FC = () => {
  const handleGenerateReport = async () => {
    try {
      const response = await axios({
        url: '/api/reports/quality', // Adjust the URL based on your deployment configuration
        method: 'GET',
        responseType: 'blob' // Important for handling binary data
      });
      // Create a URL for the blob and trigger a download
      const url = window.URL.createObjectURL(new Blob([response.data], { type: 'application/pdf' }));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', 'quality_report.pdf');
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    } catch (error) {
      console.error('Error generating report:', error);
    }
  };

  return (
    <Button variant="contained" color="primary" onClick={handleGenerateReport}>
      Generate Quality Report
    </Button>
  );
};

export default ReportGenerator;
```

### **b. Integrate the ReportGenerator in Your Dashboard**

Add the ReportGenerator component to your main dashboard or as a dedicated page/tab:
```tsx
// In your Dashboard component (or in a new Reports tab)
import React from 'react';
import ReportGenerator from './ReportGenerator';

const Dashboard = () => {
  return (
    <div>
      {/* Other dashboard components */}
      <h2>Reports</h2>
      <ReportGenerator />
    </div>
  );
};

export default Dashboard;
```

---

## **Next Steps Summary**

1. **Back-End Reporting Enhancements:**
   - Finalize and test the Flask API endpoint for generating a quality report PDF using WeasyPrint.
   - Connect the endpoint to your real data sources or simulated data for thorough testing.

2. **Front-End Integration:**
   - Add a "Generate Report" functionality to the React dashboard.
   - Allow users to download the PDF report generated by the backend.

3. **Testing and Validation:**
   - Test the entire flow locally.
   - Validate that the PDF report accurately reflects quality metrics, trend data, and detailed issue logs.
   - Enhance error handling for cases when the report generation fails.

4. **CI/CD and Automated Reporting:**
   - Integrate the report generation endpoint into your CI/CD pipeline for automated testing.
   - Optionally, schedule automated report generation (e.g., weekly) and email the reports to administrators.

5. **Documentation:**
   - Update your documentation (README.md, CI_CD_GUIDE.md, etc.) with detailed instructions on generating and using quality reports.
   - Prepare training materials or walkthroughs on how to utilize this feature.

---

This comprehensive integration of enhanced reporting capabilities will provide a powerful tool for monitoring data quality trends and generating automated insights. The steps above outline a clear path from backend report generation to frontend download integration.

Would you like further details on any specific part, or should we start implementing the CI/CD integration for this new reporting functionality next?