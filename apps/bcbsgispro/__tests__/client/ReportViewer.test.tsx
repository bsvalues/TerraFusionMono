import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { ReportViewer } from '@/components/reporting/report-viewer';
import { useQuery } from '@tanstack/react-query';

// Mock TanStack Query
jest.mock('@tanstack/react-query', () => ({
  useQuery: jest.fn(),
}));

describe('ReportViewer Component', () => {
  const mockReport = {
    id: 123,
    name: 'SM00 Report - 2023-01-01 to 2023-01-31',
    createdAt: new Date().toISOString(),
    templateId: 1,
    templateName: 'SM00 Report',
    parameters: {
      startDate: '2023-01-01',
      endDate: '2023-01-31'
    },
    status: 'completed',
    generatedBy: 'admin',
    totalRows: 150
  };

  const mockReportData = {
    headers: [
      { id: 'workflowId', label: 'Workflow ID' },
      { id: 'workflowTitle', label: 'Workflow Title' },
      { id: 'eventCount', label: 'Event Count' },
      { id: 'documentCount', label: 'Document Count' },
      { id: 'status', label: 'Status' }
    ],
    rows: [
      { 
        workflowId: 1, 
        workflowTitle: 'BLA-2023-001', 
        eventCount: 12, 
        documentCount: 5, 
        status: 'completed' 
      },
      { 
        workflowId: 2, 
        workflowTitle: 'BLA-2023-002', 
        eventCount: 8, 
        documentCount: 3, 
        status: 'in_progress' 
      },
      { 
        workflowId: 3, 
        workflowTitle: 'BLA-2023-003', 
        eventCount: 15, 
        documentCount: 7, 
        status: 'completed' 
      }
    ],
    summaries: [
      { label: 'Total Workflows', value: 3 },
      { label: 'Completed Workflows', value: 2 },
      { label: 'In Progress Workflows', value: 1 },
      { label: 'Total Events', value: 35 },
      { label: 'Total Documents', value: 15 }
    ],
    charts: [
      {
        type: 'bar',
        title: 'Workflow Activity',
        data: {
          labels: ['BLA-2023-001', 'BLA-2023-002', 'BLA-2023-003'],
          datasets: [
            {
              label: 'Events',
              data: [12, 8, 15]
            },
            {
              label: 'Documents',
              data: [5, 3, 7]
            }
          ]
        }
      }
    ],
    pagination: {
      currentPage: 1,
      totalPages: 1,
      totalRows: 3,
      pageSize: 10
    }
  };

  beforeEach(() => {
    // Setup default mock implementations
    (useQuery as jest.Mock).mockImplementation(({ queryKey }) => {
      // Mock report data
      if (queryKey[0] === `/api/reports/${mockReport.id}/data`) {
        return {
          data: mockReportData,
          isLoading: false,
          error: null,
        };
      }
      
      // Mock report metadata
      if (queryKey[0] === `/api/reports/${mockReport.id}`) {
        return {
          data: mockReport,
          isLoading: false,
          error: null,
        };
      }
      
      return {
        data: null,
        isLoading: false,
        error: null,
      };
    });
  });

  test('renders report header with metadata', async () => {
    render(<ReportViewer reportId={mockReport.id} />);
    
    await waitFor(() => {
      expect(screen.getByText('SM00 Report - 2023-01-01 to 2023-01-31')).toBeInTheDocument();
      expect(screen.getByText('Generated by: admin')).toBeInTheDocument();
      expect(screen.getByText('Total rows: 150')).toBeInTheDocument();
    });
  });

  test('renders report data table with headers and rows', async () => {
    render(<ReportViewer reportId={mockReport.id} />);
    
    await waitFor(() => {
      // Check headers
      expect(screen.getByText('Workflow ID')).toBeInTheDocument();
      expect(screen.getByText('Workflow Title')).toBeInTheDocument();
      expect(screen.getByText('Event Count')).toBeInTheDocument();
      expect(screen.getByText('Document Count')).toBeInTheDocument();
      expect(screen.getByText('Status')).toBeInTheDocument();
      
      // Check data rows
      expect(screen.getByText('BLA-2023-001')).toBeInTheDocument();
      expect(screen.getByText('BLA-2023-002')).toBeInTheDocument();
      expect(screen.getByText('BLA-2023-003')).toBeInTheDocument();
    });
  });

  test('renders summary cards with report metrics', async () => {
    render(<ReportViewer reportId={mockReport.id} />);
    
    await waitFor(() => {
      expect(screen.getByText('Total Workflows')).toBeInTheDocument();
      expect(screen.getByText('3')).toBeInTheDocument();
      expect(screen.getByText('Completed Workflows')).toBeInTheDocument();
      expect(screen.getByText('2')).toBeInTheDocument();
      expect(screen.getByText('In Progress Workflows')).toBeInTheDocument();
      expect(screen.getByText('1')).toBeInTheDocument();
    });
  });

  test('renders chart visualization', async () => {
    render(<ReportViewer reportId={mockReport.id} />);
    
    await waitFor(() => {
      expect(screen.getByText('Workflow Activity')).toBeInTheDocument();
    });
    
    // Note: Actual chart rendering would be tested in a more comprehensive way
    // but for now we just verify the chart title is present
  });

  test('handles table sorting', async () => {
    render(<ReportViewer reportId={mockReport.id} />);
    
    await waitFor(() => {
      expect(screen.getByText('Workflow Title')).toBeInTheDocument();
    });
    
    // Click on column header to sort
    fireEvent.click(screen.getByText('Workflow Title'));
    
    // Verify sort indicator appears
    await waitFor(() => {
      expect(screen.getByLabelText('sorted ascending')).toBeInTheDocument();
    });
    
    // Click again to reverse sort
    fireEvent.click(screen.getByText('Workflow Title'));
    
    // Verify sort indicator changes
    await waitFor(() => {
      expect(screen.getByLabelText('sorted descending')).toBeInTheDocument();
    });
  });

  test('handles pagination', async () => {
    // Mock report with multiple pages
    const paginatedReportData = {
      ...mockReportData,
      pagination: {
        currentPage: 1,
        totalPages: 3,
        totalRows: 25,
        pageSize: 10
      }
    };
    
    (useQuery as jest.Mock).mockImplementation(({ queryKey }) => {
      if (queryKey[0] === `/api/reports/${mockReport.id}/data`) {
        return {
          data: paginatedReportData,
          isLoading: false,
          error: null,
        };
      }
      
      if (queryKey[0] === `/api/reports/${mockReport.id}`) {
        return {
          data: mockReport,
          isLoading: false,
          error: null,
        };
      }
      
      return {
        data: null,
        isLoading: false,
        error: null,
      };
    });
    
    render(<ReportViewer reportId={mockReport.id} />);
    
    await waitFor(() => {
      expect(screen.getByText('Page 1 of 3')).toBeInTheDocument();
    });
    
    // Click next page button
    fireEvent.click(screen.getByLabelText('Go to next page'));
    
    // Verify page number update (in a real component this would trigger a new query)
    await waitFor(() => {
      expect(screen.getByText('Page 2 of 3')).toBeInTheDocument();
    });
  });

  test('displays loading state while data is loading', async () => {
    // First return loading state
    (useQuery as jest.Mock).mockImplementationOnce(({ queryKey }) => {
      return {
        data: null,
        isLoading: true,
        error: null,
      };
    });
    
    render(<ReportViewer reportId={mockReport.id} />);
    
    // Verify loading indicator is shown
    expect(screen.getByText('Loading report data...')).toBeInTheDocument();
    
    // Mock data loaded
    (useQuery as jest.Mock).mockImplementation(({ queryKey }) => {
      if (queryKey[0] === `/api/reports/${mockReport.id}/data`) {
        return {
          data: mockReportData,
          isLoading: false,
          error: null,
        };
      }
      
      if (queryKey[0] === `/api/reports/${mockReport.id}`) {
        return {
          data: mockReport,
          isLoading: false,
          error: null,
        };
      }
      
      return {
        data: null,
        isLoading: false,
        error: null,
      };
    });
    
    // Verify data appears after loading
    await waitFor(() => {
      expect(screen.getByText('BLA-2023-001')).toBeInTheDocument();
    });
  });

  test('handles error state gracefully', async () => {
    // Mock error in report data fetch
    (useQuery as jest.Mock).mockImplementation(({ queryKey }) => {
      if (queryKey[0] === `/api/reports/${mockReport.id}/data`) {
        return {
          data: null,
          isLoading: false,
          error: new Error('Failed to load report data'),
        };
      }
      
      if (queryKey[0] === `/api/reports/${mockReport.id}`) {
        return {
          data: mockReport,
          isLoading: false,
          error: null,
        };
      }
      
      return {
        data: null,
        isLoading: false,
        error: null,
      };
    });
    
    render(<ReportViewer reportId={mockReport.id} />);
    
    // Verify error message is shown
    await waitFor(() => {
      expect(screen.getByText('Error loading report data')).toBeInTheDocument();
      expect(screen.getByText('Failed to load report data')).toBeInTheDocument();
    });
    
    // Verify retry button is shown
    expect(screen.getByText('Retry')).toBeInTheDocument();
  });
});